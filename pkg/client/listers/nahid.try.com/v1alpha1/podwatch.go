/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "k8s-crd-controller/pkg/apis/nahid.try.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodWatchLister helps list PodWatchs.
type PodWatchLister interface {
	// List lists all PodWatchs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PodWatch, err error)
	// PodWatchs returns an object that can list and get PodWatchs.
	PodWatchs(namespace string) PodWatchNamespaceLister
	PodWatchListerExpansion
}

// podWatchLister implements the PodWatchLister interface.
type podWatchLister struct {
	indexer cache.Indexer
}

// NewPodWatchLister returns a new PodWatchLister.
func NewPodWatchLister(indexer cache.Indexer) PodWatchLister {
	return &podWatchLister{indexer: indexer}
}

// List lists all PodWatchs in the indexer.
func (s *podWatchLister) List(selector labels.Selector) (ret []*v1alpha1.PodWatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodWatch))
	})
	return ret, err
}

// PodWatchs returns an object that can list and get PodWatchs.
func (s *podWatchLister) PodWatchs(namespace string) PodWatchNamespaceLister {
	return podWatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodWatchNamespaceLister helps list and get PodWatchs.
type PodWatchNamespaceLister interface {
	// List lists all PodWatchs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PodWatch, err error)
	// Get retrieves the PodWatch from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PodWatch, error)
	PodWatchNamespaceListerExpansion
}

// podWatchNamespaceLister implements the PodWatchNamespaceLister
// interface.
type podWatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodWatchs in the indexer for a given namespace.
func (s podWatchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodWatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodWatch))
	})
	return ret, err
}

// Get retrieves the PodWatch from the indexer for a given namespace and name.
func (s podWatchNamespaceLister) Get(name string) (*v1alpha1.PodWatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podwatch"), name)
	}
	return obj.(*v1alpha1.PodWatch), nil
}
